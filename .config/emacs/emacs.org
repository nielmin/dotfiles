#+TITLE: Emacs Configuration
#+AUTHOR: Daniel Hwang
#+DESCRIPTION: Personal Emacs configuration
* Early Init
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/early-init.el :mkdrip yes
;; early-init.el --- Emacs pre package.el & GUI configuration -*- lexical-binding: t; -*-
;; Code:

(setopt backup-inhibited t
	  make-backup-files nil
	  auto-save-default nil)

(setopt native-comp-async-report-warnings-errors nil)
;; Unneeded UI elemenets
(menu-bar-mode -1)
(tool-bar-mode -1)      
(scroll-bar-mode -1)    
(tooltip-mode -1)       
(set-fringe-mode 10)

(setopt inhibit-splash-screen t)
(setopt use-file-dialog nil)
  #+end_src

* Init
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/init.el
;; -*- lexical-binding: t; -*-

;; Add configuration modules to load path
(add-to-list 'load-path '"~/.dotfiles/.config/emacs/modules")

(setopt custom-file "~/.dotfiles/.config/emacs/custom.el")

;; Required Modules
(require 'el-package)
(require 'el-completion)
(require 'el-theme)
(require 'el-org)
(require 'el-ui)
(require 'el-dired)
(require 'el-eglot)
(require 'el-treesit)
(require 'el-flycheck)
(require 'el-flyspell)
(require 'el-meow)
(require 'el-magit)
(require 'modes)
(require 'terminal)

(when (daemonp)
  (use-package exec-path-from-shell)
  (exec-path-from-shell-initialize))

(setq-default create-lockfiles nil)
  #+end_src
  
* Emacs
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/init.el
(use-package emacs
  :init
  ;; Follow symlinks (for git dotfiles)
  (setopt vc-follow-symlinks t)
  ;; Frame height and width
  (add-to-list 'default-frame-alist '(height . 24))
  (add-to-list 'default-frame-alist '(width . 80))
  ;; Set tab width
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
  :bind
  ("M-o" . other-window)
  ("C-x k" . 'kill-cur-buffer)
  ("C-c '" . org-edit-src-code)
  ("C-c c e" . 'config-edit)
  :hook
  ;; Enable line numbers for some modes
  ((prog-mode . display-line-numbers-mode)
   (conf-mode . display-line-numbers-mode))

  :config
  (set-face-attribute 'default nil
                      :family "0xProto Nerd Font"
                      :height 140)
  (set-face-attribute 'fixed-pitch nil
                      :family "0xProto Nerd Font")
  (set-face-attribute 'variable-pitch nil
                      :family "Atkinson Hyperlegible"
                      :height 160)

  (setopt scroll-conservatively 100)
  (setopt scroll-margin 8)

  (setopt org-src-window-setup 'current-window)

  (defun kill-cur-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

  (defun config-edit ()
    (interactive)
    (find-file "~/.dotfiles/.config/emacs/emacs.org"))
  (defalias 'yes-or-no-p 'y-or-n-p)

  :custom
  (tab-always-indent 'complete)
  (read-extended-command-predicate #'command-completion-default-include-p)

  )
#+end_src

* Diminish
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/init.el
(use-package diminish
  :ensure t
  )
#+end_src

* which-key
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/init.el
(use-package which-key
  :diminish which-key-mode
  :hook (after-init . which-key-mode)
  :config
  (setopt which-key-idle-delay 0.3)
  ) 
#+end_src

* Use-Package
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-package.el :mkdirp yes
;; -*- lexical-binding: t; -*-
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-and-compile
  (setopt use-package-always-ensure t
	        use-package-expand-minimally t))

(provide 'el-package)
#+end_src

* Flycheck
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-flycheck.el
(use-package flycheck
  :ensure t
  :hook
  (prog-mode . flycheck-mode)
)

(provide 'el-flycheck)
#+end_src

* Flyspell
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-flyspell.el
(use-package flyspell
  :ensure nil
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . flyspell-mode)
  )
(provide 'el-flyspell)
#+end_src

* Completion
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-completion.el
;; -*- lexical-binding: t; -*-
#+end_src
** Savehist
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-completion.el
(use-package savehist
  :ensure nil
  :hook (after-init . savehist-mode)
  )
#+end_src

** Consult
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-completion.el
(use-package consult 
  :bind
  ("C-s" . consult-line)
  ("C-x b" . consult-buffer)
  ("C-x C-b" . consult-buffer)
  :hook
  (completion-list-mode . consult-preview-at-point-mode)
  )
#+end_src

** Marginalia
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-completion.el
(use-package marginalia
  :ensure t
  :hook (after-init . marginalia-mode)
  )
#+end_src

** Orderless
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-completion.el
(use-package orderless
  :ensure t
  :config
  (setopt completion-styles '(orderless basic)
	        completion-category-defaults nil
	        completion-category-overrides '((file (styles partial-completion)))
	        )
  )
#+end_src

** Vertico
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-completion.el
(use-package vertico
  :ensure t
  :hook (after-init . vertico-mode)
  )
  #+end_src
  
** Corfu
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-completion.el
(use-package corfu
  :ensure t
  :hook (after-init . global-corfu-mode)
  :bind (:map corfu-map ("<tab>" . corfu-complete))
  :config
  (setopt tab-alwals-indent 'complete)
  (setopt corfu-preview-current nil)
  (setopt corfu-min-width 20)

  (setopt corfu-popupinto-delay '(1.25 . 0.5))
  (corfu-popupinfo-mode 1)

  (with-eval-after-load 'savehist
    (corfu-history-mode 1)
    (add-to-list 'savehist-additional-variables 'corfu-history))
  )
#+end_src

#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-completion.el
(provide 'el-completion)
#+end_src

* ef-themes
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-theme.el
;; -*- lexical-binding: t; -*-
(use-package ef-themes
  :ensure t
  :init
  :config
  (ef-themes-select 'ef-dream)
  )

(provide 'el-theme)
#+end_src
  
* Dired
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-dired.el
;; -*- lexical-binding: t; -*-
(use-package dired
  :ensure nil
  :commands (dired)
  :hook
  (dired-mode . dired-hide-details-mode)
  (dired-mode . hl-line-mode)
  :config
  (setopt dired-recursive-copies 'always)
  (setopt dired-recursive-deletes 'always)
  (setopt delete-by-moving-to-trash t)
  (setopt dired-dwim-target t)
  )

(provide 'el-dired)

#+end_src

* Eglot
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-eglot.el
;; -*- lexical-binding: t; -*-
(use-package eglot
  :hook
  ((html-mode html-ts-code) . eglot-ensure)
  ((css-ts-mode css-mode) . eglot-ensure)
  ((go-mode go-ts-mode) . eglot-ensure)
  ((python-mode python-ts-mode) . eglot-ensure)
  :config
  (fset #'jsonrpc--log-event #'ignore)
)

(provide 'el-eglot)
#+end_src

* Org
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-org.el
;; -*- lexical-binding: t; -*-

(use-package org
  :init
  ;; org settings
  (setopt org-ellipsis " ")
  (setopt org-src-fontify-natively t)
  (setopt org-src-tab-acts-natively t)
  (setopt org-confirm-babel-evaluate nil)
  (setopt org-export-with-smart-quotes t)
  (setopt org-src-window-setup 'current-window)
  (setopt org-log-into-drawer t)
  :hook
  (org-mode . org-indent-mode)
  (org-mode . visual-line-mode)
  :config
  ;; org-agenda
  (setopt org-agenda-start-with-log-mode t)
  (setopt org-log-done 'time)
  ;; indentation
  (setopt org-edit-src-content-indentation 0
	        org-src-tab-acts-natively t
	        org-src-preserve-indentation t)
  ;; org-babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     )
   )
  )

(use-package org-faces
  :ensure nil
  :after org
  :config
  ;; Resize Org headings
  (dolist (face '((org-level-1 . 1.35)
                  (org-level-2 . 1.3)
                  (org-level-3 . 1.2)
                  (org-level-4 . 1.1)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Atkinson Hyperlegible" :weight 'bold :height (cdr face)))
  )

(use-package org-tempo
  :ensure nil
  :after org
  :config
  (dolist (item '(("sh" . "src")
                  ("el" . "src emacs-lisp")
                  ("py" . "src python")
                  ("go" . "src go")
                  )
                )
    (add-to-list 'org-structure-template-alist item)))

(provide 'el-org)
#+end_src

* Rainbow-delimiters
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-ui.el
;; -*- lexical-binding: t; -*-
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode)
  )

(provide 'el-ui)
#+end_src

* Treesit
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-treesit.el
(use-package treesit
  :ensure nil
  :init
  (setopt treesit-language-source-alist
        '(
          (bash "https://github.com/tree-sitter/tree-sitter-bash")
          (css "https://github.com/tree-sitter/tree-sitter-css")
          (elisp "https://github.com/Wilfred/tree-sitter-elisp")
          (go "https://github.com/tree-sitter/tree-sitter-go") 
          (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
          (html "https://github.com/tree-sitter/tree-sitter-html")
          (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
          (json "https://github.com/tree-sitter/tree-sitter-json")
          (make "https://github.com/alemuller/tree-sitter-make")
          (markdown "https://github.com/ikatyang/tree-sitter-markdown")
          (php "https://github.com/tree-sitter/tree-sitter-php" "master" "php/src")
          (python "https://github.com/tree-sitter/tree-sitter-python")
          (yaml "https://github.com/ikatyang/tree-sitter-yaml")
          )
        )
  )

(use-package treesit-auto
  :ensure t
  :hook (prog-mode . global-treesit-auto-mode)
  )

(provide 'el-treesit)
#+end_src

* Magit
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-magit.el
(use-package magit
  :init
  (message "Loading Magit!")
  :config
  (message "Loaded Magit!")
  :bind (("C-x g" . magit-status)
         ("C-x C-g" . magit-status))
  )

(provide 'el-magit)
#+end_src

* go-mode
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/modes.el
(defun go-run-this-file ()
  "go run"
  (interactive)
  (compile (format "go run %s" (buffer-file-name))))

(defun go-compile ()
  "go compile"
  (interactive)
  (compile "go build -v && go test -v && go vet"))

(defun go-compile-debug ()
  "go compile with necessary flags to debug with gdb"
  (interactive)
  (compile "go build -gcflags=all=\" -N -l\""))

(use-package go-mode
  :ensure t
  :bind (("C-c C-k" . go-run-this-file)
         ("C-c C-c" . go-compile)
         ("C-c C-d" . go-compile-debug))
  :hook ((before-save . eglot-format-buffer))
)

(provide 'modes)
#+end_src

* eat
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/terminal.el
(use-package eat
  :ensure t
  )
(provide 'terminal)
#+end_src

