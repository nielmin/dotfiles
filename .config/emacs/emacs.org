#+TITLE: Emacs Configuration
#+AUTHOR: Daniel Hwang
#+DESCRIPTION: Personal Emacs configuration
* Early Init
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/early-init.el :mkdrip yes
;; early-init.el --- Emacs pre package.el & GUI configuration -*- lexical-binding: t; -*-
;; Code:

(setq backup-inhibited t
	  make-backup-files nil
	  auto-save-default nil)

(setq native-comp-async-report-warnings-errors nil)
;; Unneeded UI elemenets
(menu-bar-mode -1)
(tool-bar-mode -1)      
(scroll-bar-mode -1)    
(tooltip-mode -1)       
(set-fringe-mode 10)

(setq inhibit-splash-screen t)
(setq use-file-dialog nil)
  #+end_src

* Init
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/init.el
;; -*- lexical-binding: t; -*-

;; Add configuration modules to load path
(add-to-list 'load-path '"~/.dotfiles/.config/emacs/modules")

;; Required Modules
(require 'el-package)
(require 'el-completion)
(require 'el-theme)
(require 'el-org)
(require 'el-ui)
(require 'el-dired)
(require 'el-eglot)
(require 'el-treesit)
(require 'el-flycheck)

(when (daemonp)
  (exec-path-from-shell-initialize))

(setq-default create-lockfiles nil)
  #+end_src

* Flycheck
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-flycheck.el
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)
)
(provide 'el-flycheck)
#+end_src

* Use-Package
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-package.el :mkdirp yes
  ;; -*- lexical-binding: t; -*-
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

(eval-and-compile
    (setq use-package-always-ensure t
	  use-package-expand-minimally t))

  (provide 'el-package)
#+end_src

* Vertico
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-completion.el
  ;; -*- lexical-binding: t; -*-
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
  )
  #+end_src
  
* Savehist
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-completion.el
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

* Marginalia
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-completion.el
  (use-package marginalia 
    :init
    (marginalia-mode))
#+end_src

* Consult
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-completion.el
  (use-package consult 
    :bind
    ("C-s" . consult-line)
    ("C-x b" . consult-buffer)
    :hook
    (completion-list-mode . consult-preview-at-point-mode)
    )
#+end_src

* Orderless
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-completion.el
   (use-package orderless
     :init
     (setq completion-styles '(orderless basic)
	   completion-category-defaults nil
	   completion-category-overrides '((file (styles partial-completion)))
	   )
     )
#+end_src

* ef-themes
  #+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-theme.el
;; -*- lexical-binding: t; -*-
(use-package ef-themes
  :ensure t
  :init
  :config
  (ef-themes-select 'ef-cyprus)
  )

(provide 'el-theme)
  #+end_src
  
* Diminish
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/init.el
    (use-package diminish
      :ensure t
      )
#+end_src

* Emacs
  #+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/init.el
    (use-package emacs
      :init
      ;; Follow symlinks (for git dotfiles)
      (setq vc-follow-symlinks t)
      ;; Frame height and width
      (add-to-list 'default-frame-alist '(height . 24))
      (add-to-list 'default-frame-alist '(width . 80))
      ;; Set tab width
      (setq-default tab-width 4)
      (setq-default indent-tabs-mode nil)
      :bind
      ("M-o" . other-window)
      ("C-x k" . 'kill-cur-buffer)
      ("C-x C-b" . ibuffer)
      ("C-c '" . org-edit-src-code)
      ("C-c c e" . 'config-edit)
      :hook
      ;; Enable line numbers for some modes
      ((prog-mode . display-line-numbers-mode)
       (conf-mode . display-line-numbers-mode))

      :config
      (set-face-attribute 'default nil
                          :family "Iosevka"
                          :height 140)
      (set-face-attribute 'fixed-pitch nil
                          :family "Iosevka")
      (set-face-attribute 'variable-pitch nil
                          :family "Roboto"
                          :height 160)

      (setq scroll-conservatively 100)
      (setq scroll-margin 8)

      (setq org-src-window-setup 'current-window)

      (defun kill-cur-buffer ()
	    (interactive)
	    (kill-buffer (current-buffer)))
      (defun config-edit ()
	    (interactive)
	    (find-file "~/.dotfiles/.config/emacs/emacs.org"))
      (defalias 'yes-or-no-p 'y-or-n-p)
      :custom
      (tab-always-indent 'complete)
      (read-extended-command-predicate #'command-completion-default-include-p)
    )

#+end_src

* Corfu
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-completion.el
  (use-package corfu
    :init
    (global-corfu-mode)
    )
  (provide 'el-completion)
#+end_src

* Dired
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-dired.el
  ;; -*- lexical-binding: t; -*-
  (use-package dired
    :ensure nil
    :init
    :hook
    (dired-mode . dired-hide-details-mode)
    :config
    (setq delete-by-moving-to-trash t)
    (setq dired-dwim-target t)
    )
  (provide 'el-dired)
#+End_src

* Eglot
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-eglot.el
  ;; -*- lexical-binding: t; -*-
  (use-package eglot 
    :hook
    ((html-mode html-ts-code) . eglot-ensure)
    ((css-ts-mode css-mode) . eglot-ensure)
    ((go-mode go-ts-mode) . eglot-ensure)
    ((python-mode python-ts-mode) . eglot-ensure)
    :config
    (fset #'jsonrpc--log-event #'ignore)
    )
  (provide 'el-eglot)
#+end_src

* Org
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-org.el
  ;; -*- lexical-binding: t; -*-
  (use-package org
    :init
    ;; org settings
    (setq org-ellipsis " ")
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (setq org-confirm-babel-evaluate nil)
    (setq org-export-with-smart-quotes t)
    (setq org-src-window-setup 'current-window)
    (setq org-log-into-drawer t)
    :hook
    (org-mode . org-indent-mode)
    (org-mode . visual-line-mode)
    :config
    ;; org-agenda
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    ;; indentation
    (setq org-edit-src-content-indentation 0
	  org-src-tab-acts-natively t
	  org-src-preserve-indentation t)
    ;; org-babel
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       )
     )
    ;; latex
    (with-eval-after-load 'ox-latex
      (add-to-list 'org-latex-classes
		   '("org-plain-latex"
		     "\\documentclass{article}
	     [NO-DEFAULT-PACKAGES]
	     [PACKAGES]
	     [EXTRA]"
		     ("\\section{%s}" . "\\section*{%s}")
		     ("\\subsection{%s}" . "\\subsection*{%s}")
		     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		     ("\\paragraph{%s}" . "\\paragraph*{%s}")
		     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
    )
#+end_src

* org-faces
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-org.el
(use-package org-faces
  :ensure nil
  :after org
  :config
  ;; Resize Org headings
  (dolist (face '((org-level-1 . 1.35)
                  (org-level-2 . 1.3)
                  (org-level-3 . 1.2)
                  (org-level-4 . 1.1)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Roboto" :weight 'bold :height (cdr face)))
  )
#+end_src

* Org Modern
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-org.el
(use-package org-modern
  :after org
  :hook
  (org-mode . org-modern-mode)
)

#+end_src

* Org Temp
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-org.el
(use-package org-tempo
  :ensure nil
  :after org
  :config
  (dolist (item '(("sh" . "src")
                  ("el" . "src emacs-lisp")
                  ("py" . "src python")
                  ("go" . "src go")
                  )
                )
    (add-to-list 'org-structure-template-alist item)))
#+end_src

#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-org.el
(provide 'el-org)
#+end_src

* Rainbow-delimiters
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-ui.el
  ;; -*- lexical-binding: t; -*-
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode)
    )

  (provide 'el-ui)
#+end_src

* Treesit
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-treesit.el
(use-package treesit
  :ensure nil
  :init
  (setq treesit-language-source-alist
        '(
          (bash "https://github.com/tree-sitter/tree-sitter-bash")
          (css "https://github.com/tree-sitter/tree-sitter-css")
          (elisp "https://github.com/Wilfred/tree-sitter-elisp")
          (go "https://github.com/tree-sitter/tree-sitter-go") 
          (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
          (html "https://github.com/tree-sitter/tree-sitter-html")
          (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
          (json "https://github.com/tree-sitter/tree-sitter-json")
          (make "https://github.com/alemuller/tree-sitter-make")
          (markdown "https://github.com/ikatyang/tree-sitter-markdown")
          (php "https://github.com/tree-sitter/tree-sitter-php" "master" "php/src")
          (python "https://github.com/tree-sitter/tree-sitter-python")
          (yaml "https://github.com/ikatyang/tree-sitter-yaml")
          )
        )
  )
#+end_src

#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-treesit.el
(use-package treesit-auto
  :ensure t
  :config
  (global-treesit-auto-mode)
  )
#+end_src

#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/modules/el-treesit.el
(provide 'el-treesit)
#+end_src

* which-key
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/init.el
(use-package which-key
  :diminish which-key-mode
  :init
  (which-key-mode)
  :config
  (setq which-key-idle-delay 0.3)
  ) 
#+end_src

* Magit
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/emacs/init.el
(use-package magit
  :init
  (message "Loading Magit!")
  :config
  (message "Loaded Magit!")
  :bind (("C-x g" . magit-status)
         ("C-x C-g" . magit-status))
  )
#+end_src
