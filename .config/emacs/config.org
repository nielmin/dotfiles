#+TITLE: Emacs Configuration
#+AUTHOR: Daniel Hwang
#+DESCRIPTION: Personal Emacs configuration
#+STARTUP: show2levels

* General Settings
** Backups
#+begin_src emacs-lisp
(setq backup-directory-alist
	  `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
	  `((".*" ,temporary-file-directory t)))
(setq make-backup-files nil)
(setq auto-save-default nil)
#+end_src
** Fonts
#+begin_src emacs-lisp
; Change default font for new (non special-display) frames:
(add-to-list 'default-frame-alist '(font . "Iosevka-16"))
(set-face-attribute 'default t :font "Iosevka-16")
; Change default font for the current frame, as well as future frames:
(set-face-attribute 'default nil :font "Iosevka-16")
(set-frame-font "Iosevka-16" nil t)
#+end_src
** Frame size
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(height . 28))
(add-to-list 'default-frame-alist '(width . 80))
#+end_src
** Key Bindings
*** Buffers
**** Kill current buffer
#+begin_src emacs-lisp
(defun kill-cur-buffer ()
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-cur-buffer)
#+end_src
*** General
#+begin_src emacs-lisp
(global-set-key (kbd "M-o") 'other-window)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
*** Config edit/reload
**** edit
#+begin_src emacs-lisp
(global-set-key (kbd "C-c c e") nil)
(defun config-edit ()
  (interactive)
  (find-file "~/.config/emacs/config.org"))
(global-set-key (kbd "C-c c e") 'config-edit)
#+end_src
**** reload
#+begin_src emacs-lisp
(global-set-key (kbd "C-c r") nil)
(defun config-reload ()
  (interactive)
  (org-babel-load-file (expand-file-name "~/.config/emacs/config.org")))
(global-set-key (kbd "C-c c r") 'config-reload)
#+end_src
*** Org
#+begin_src emacs-lisp
(global-unset-key (kbd "C-c '"))
(global-set-key (kbd "C-c '") 'org-edit-src-code)
#+end_src
** Line and column numbers
#+begin_src emacs-lisp
  (column-number-mode)
#+end_src
** Line numbers for programming mode
#+begin_src emacs-lisp
;; Enable line numbers for some modes
(dolist (mode '(text-mode-hook
				prog-mode-hook
				conf-mode-hook))
  (add-hook mode (lambda() (display-line-numbers-mode 1))))

;; Override some modes which derive from the above
(dolist (mode '(org-mode-hook))
  (add-hook mode (lambda() (display-line-numbers-mode 0)))
  )
#+end_src
** No splash screen
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src
** Set Tab indentation
#+begin_src emacs-lisp
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
#+end_src
** Scrolling
#+begin_src emacs-lisp
(setq scroll-conservatively 100)
(setq scroll-margin 8)
#+end_src
** Source block
#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src
** Unneeded UI elements
#+begin_src emacs-lisp
(menu-bar-mode -1)       
(tool-bar-mode -1)      
(scroll-bar-mode -1)    
(tooltip-mode -1)       
(set-fringe-mode 10)    
#+end_src
** 'y' for 'Yes'
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)  
#+end_src
* Packages
** Auto-compile
#+begin_src emacs-lisp
(use-package auto-compile
  :init
  (package-initialize)
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode)
  :config
  (setq load-prefer-newer t)
  )
#+end_src
** Auto-package-update
#+begin_src emacs-lisp
(use-package auto-package-update
  :ensure t
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe)
  )
#+end_src
** Beacon
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :init (beacon-mode 1)
  )
#+end_src
** Bufler
#+begin_src emacs-lisp
(use-package bufler
  :ensure t
  :bind
  ("C-x C-b" . bufler)
)
#+end_src
** Company
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :init
  (add-hook 'after-init-hook 'global-company-mode))
#+end_src
** Consult
#+begin_src emacs-lisp
(use-package consult
  :ensure t
  :bind
  ("C-s" . consult-line)
  ("C-x b" . consult-buffer)
  :hook (completion-list-mode . consult-preview-at-point-mode)
  )
#+end_src
** Diminish
#+begin_src emacs-lisp
(use-package diminish
  :ensure t
  )
#+end_src
** Doom modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  )
#+end_src
** Doom theme
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-italic t)
  (load-theme 'doom-rouge t)
  (doom-themes-org-config)
  )
#+end_src
** Jinx
#+begin_src emacs-lisp
(use-package jinx
  :ensure t
  :init
  (add-hook 'emacs-startup-hook #'global-jinx-mode)
  :bind
  ("M-$" . #'jinx-correct)
  ("C-M-$" . #'jinx-languages)
  )
#+end_src
** Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  )
#+end_src
** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :init (marginalia-mode)
  )
#+end_src
** Meow
#+begin_src emacs-lisp
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))

(use-package meow
  :ensure t
  :config
  (meow-setup)
  (meow-global-mode 1))
#+end_src
** nerd-icons
#+begin_src emacs-lisp
(use-package nerd-icons
  :custom
  (nerd-icons-font-family "Iosevka Nerd Font Mono")
  )
#+end_src
** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))
        )
  )
#+end_src
** Org
#+begin_src emacs-lisp
(use-package org
  :ensure t)
#+end_src
** Org Superstar
#+begin_src emacs-lisp
(use-package org-superstar
  :ensure t
  :after org
  :hook
  (org-mode . org-superstar-mode)
  :config
  (setq org-superstar-special-todo-items t)
  (setq org-superstar-headline-bullets-list
        '("â—‰" ("ðŸž›" ?â—ˆ) "â—‹" "â–·"))
  )
#+end_src
** Rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
  (rainbow-delimiters-mode 1))
#+end_src
** Savehist
#+begin_src emacs-lisp
(use-package savehist
  :init
  (savehist-mode)
  )
#+end_src
** Vertico
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :custom
  (vertico-cycle t)
  :init (vertico-mode)
  )
#+end_src
** which-key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :init
  (which-key-mode)
  :config
  (setq which-key-idle-delay 0.3)
  ) 
#+end_src
* Org
** Agenda
#+begin_src emacs-lisp
(setq org-agenda-files
	  '("~/Documents/utsa/fa23/todo.org"))
(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)
#+end_src
** Common settings
#+begin_src emacs-lisp
(setq org-ellipsis " ")
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-confirm-babel-evaluate nil)
(setq org-export-with-smart-quotes t)
(setq org-src-window-setup 'current-window)
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src
** Indentation
#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0
	  org-src-tab-acts-natively t
	  org-src-preserve-indentation t)
#+end_src
** Languages
#+begin_src elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (C . t)
   (python . t)))
#+end_src
** LaTeX
#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
(add-to-list 'org-latex-classes
             '("org-plain-latex"
               "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src
** Line wrapping
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
		  #'(lambda ()
			  (visual-line-mode 1)))
#+end_src
* Eglot
#+begin_src emacs-lisp
(add-hook 'c-mode-hook 'eglot-ensure)
(add-hook 'go-mode-hook 'eglot-ensure)
#+end_src
