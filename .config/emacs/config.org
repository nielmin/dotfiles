#+TITLE: Emacs Configuration
#+AUTHOR: Daniel Hwang
#+DESCRIPTION: Personal Emacs configuration
#+STARTUP: show2levels

* Auto-compile
#+begin_src emacs-lisp
(use-package auto-compile
  :init
  (package-initialize)
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode)
  :config
  (setq load-prefer-newer t)
  )
#+end_src
* Auto-package-update
#+begin_src emacs-lisp
(use-package auto-package-update
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe)
  )
#+end_src
* Company
#+begin_src emacs-lisp
(use-package company
  :hook
  ((prog-mode . company-mode)
   (text-mode . company-mode))
  )
#+end_src
* Consult
#+begin_src emacs-lisp
(use-package consult
  :bind
  ("C-s" . consult-line)
  ("C-x b" . consult-buffer)
  :hook
  (completion-list-mode . consult-preview-at-point-mode)
  )
#+end_src
* Diminish
#+begin_src emacs-lisp
(use-package diminish
  )
#+end_src
* Dired
#+begin_src emacs-lisp
(use-package dired
  :hook
  (dired-mode . dired-hide-details-mode)
  :config
  (setq delete-by-moving-to-trash t)
  (setq dired-dwim-target t)
)
#+End_src
* Eglot
#+begin_src emacs-lisp
(use-package eglot
  :hook
  ((html-mode html-ts-code) . eglot-ensure)
  ((css-ts-mode css-mode) . eglot-ensure)
  ((go-mode go-ts-mode) . eglot-ensure)
  :config
  (fset #'jsonrpc--log-event #'ignore)
  )
#+end_src
* Jinx
#+begin_src emacs-lisp
(use-package jinx
  :bind
  ("M-$" . jinx-correct)
  ("C-M-$" . jinx-languages)
  :hook
  ((org-mode . jinx-mode)
  (text-mode . jinx-mode)
  (conf-mode . jinx-mode))
  )
#+end_src
* Magit
#+begin_src emacs-lisp
(use-package magit
  )
#+end_src
* Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :init
  (marginalia-mode)
  )
#+end_src
* Meow
#+begin_src emacs-lisp
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))

(use-package meow
  :config
  (meow-setup)
  (meow-global-mode 1)
  )
#+end_src
* Orderless
#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))
        )
  )
#+end_src
* Org
#+begin_src emacs-lisp
(use-package org
  :init
  ;; org settings
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (setq org-log-into-drawer t)
  :hook
  (org-mode . org-indent-mode)
  (org-mode . visual-line-mode)
  :config
  ;; org-agenda
  (setq org-agenda-files
	    '("~/Documents/utsa/todo.org"))
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  ;; indentation
  (setq org-edit-src-content-indentation 0
	    org-src-tab-acts-natively t
	    org-src-preserve-indentation t)
  ;; org-babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     )
   )
  ;; latex
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("org-plain-latex"
                   "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
  
)
#+end_src
* Org Superstar
#+begin_src emacs-lisp
(use-package org-superstar
  :after org
  :hook
  (org-mode . org-superstar-mode)
  :config
  (setq org-superstar-special-todo-items t)
  (setq org-superstar-headline-bullets-list
        '("◉" "○"))
  )
#+end_src
* Rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode)
  )
#+end_src
* Savehist
#+begin_src emacs-lisp
(use-package savehist
  :init
  (savehist-mode)
  )
#+end_src
* Treesit
#+begin_src emacs-lisp
(use-package treesit
  :preface
  (dolist (mapping '((go-mode . go-ts-mode)))
    (add-to-list 'major-mode-remap-alist mapping))
  :init
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-ts-mode))
  (add-to-list 'auto-mode-alist '("/go\\.mod\\'" . go-mod-ts-mode))
  :config
  (setq treesit-language-source-alist
   '((bash "https://github.com/tree-sitter/tree-sitter-bash")
     (css "https://github.com/tree-sitter/tree-sitter-css")
     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
     (go "https://github.com/tree-sitter/tree-sitter-go")
     (html "https://github.com/tree-sitter/tree-sitter-html")
     (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
     (json "https://github.com/tree-sitter/tree-sitter-json")
     (make "https://github.com/alemuller/tree-sitter-make")
     (markdown "https://github.com/ikatyang/tree-sitter-markdown")
     (python "https://github.com/tree-sitter/tree-sitter-python")
     (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
  )
#+end_src
* Vertico
#+begin_src emacs-lisp
(use-package vertico
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode)
  )
#+end_src
* which-key
#+begin_src emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :init
  (which-key-mode)
  :config
  (setq which-key-idle-delay 0.3)
  ) 
#+end_src
